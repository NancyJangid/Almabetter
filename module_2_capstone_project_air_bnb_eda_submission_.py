# -*- coding: utf-8 -*-
"""Module 2: Capstone Project Air Bnb EDA Submission .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1B6UdEeZ4fGQVdIwsFM2qCGn1QkfAtCLK

# **AIRBNB BOOKINGS ANALYSIS**

# **Project Summary -**

This project focuses on performing **Exploratory Data Analysis (EDA)** on the Airbnb listings dataset for New York City (2019). The primary goal is to uncover patterns, trends, and insights that can help Airbnb and hosts make data-driven decisions to optimize listings, improve guest satisfaction, and increase bookings.

With over 48,000 listings, the dataset includes attributes such as location (borough and neighborhood), room type, price, availability, number of reviews, and more. Through visualizations and statistical analysis, we aim to answer key business questions such as:

*   Which neighborhoods and room types are the most popular?
*   How does pricing vary by location and listing type?
*   What trends can be seen in guest reviews and availability?
*   Are there any outliers or inconsistencies in the data?, etc



*By transforming raw data into meaningful insights, this project not only highlights the current state of Airbnb in NYC but also offers practical recommendations for improving business outcomes for both the platform and its users.*

# **Problem Statement**

Airbnb hosts in New York City often face challenges in optimizing their listings for maximum visibility, bookings, and revenue. With thousands of active listings varying by location, price, room type, and availability, it becomes difficult to identify what factors contribute most to a successful listing. Additionally, guests may struggle to find cost-effective and highly-rated accommodations due to a lack of transparency in listing performance and pricing consistency.

To address this, we aim to analyze Airbnb’s 2019 NYC listing data to uncover meaningful insights and answer critical questions about market behavior, pricing trends, neighborhood popularity, room type performance, and seasonal booking patterns. This analysis will support data-driven recommendations for improving host strategy, guest experience, and overall platform efficiency.

# ***Let's Begin !***

## ***1. Know Your Data***
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Import Libraries"""

# Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### Dataset Loading"""

# Load Dataset
data = pd.read_csv("/content/drive/MyDrive/Airbnb NYC 2019.csv")

"""### Dataset First View"""

# Dataset First Look
data.head()

data.tail()

"""### Dataset Rows & Columns count"""

# Dataset Rows & Columns count
data.shape

print("Total number of rows: ", data.shape[0])
print("Total number of column: ", data.shape[1])

"""### Dataset Information"""

# Dataset Info
data.info()

"""From the following info provided its clear that there are total 48895 rows and 16 columns out of which 6 columns have categorical value indicating (object) and rest 10 have numerical value indicating(float and int)

#### Duplicate Values
"""

# Dataset Duplicate Value Count
data.duplicated()
print("Number of duplicate values: ", data.duplicated().sum())

"""#### Missing Values/Null Values"""

# Missing Values/Null Values Count
data.isna()
data.isna().sum()

"""There are total of 4 columns named['name ','host_name','last_review','reviews_per_month']in which null values are present.

*   last_review have 10052 null values.
*   reviews_per_month have 10052 null values.
*   name have 16 null values.
*   host_name have 21 null values.

"""

plt.figure(figsize=(7,6))
sns.heatmap(data.isnull(), cbar=False, cmap='magma', yticklabels=False)
plt.title('Missing Data Before Filling', fontsize=14)
plt.show()

"""handle null values of name"""

# Visualizing the missing values
data_name = pd.isnull(data["name"])
missing_name_data = data[data_name]
missing_name_data.head(2)

data_host_name = pd.isnull(data["host_name"])
missing_host_name_data = data[data_host_name]
missing_host_name_data.head(2)

data_last_review = pd.isnull(data["last_review"])
missing_last_review_data = data[data_last_review]
missing_last_review_data.head(2)

data_reviews_per_month = pd.isnull(data["reviews_per_month"])
missing_reviews_per_month = data[data_reviews_per_month]
missing_reviews_per_month.head(2)

data["name"].fillna('Unknown', inplace = True)
data["host_name"].fillna('Unknown', inplace = True)
data["last_review"].fillna('No Review', inplace = True)
data["reviews_per_month"].fillna(0 , inplace = True)

data.isna().sum()

plt.figure(figsize=(7,6))
sns.heatmap(data.isnull(), cbar=False, cmap='magma', yticklabels=False)
plt.title('Missing Data After Filling', fontsize=14)
plt.show()

"""### What did you know about your dataset?

This dataset contains details about **Airbnb** listings in New York City from 2019. It includes information like:

*   The listing's name, location, and room type.

*   The price, minimum nights to book, and availability.

*   Host details like host name and number of listings they own

*  Review information such as number of reviews and last review date


There are **48,895** listings with **16** columns.
Most columns are complete, but a few have missing values:


*   Some listings don’t have a name or host name.
*   Around 20% of listings have no reviews, so their last review date and reviews per month are missing.

There are **no duplicate rows**, and the data types are mostly correct.

*Overall, the dataset is clean and ready for analysis with a few simple fixes.*

## ***2. Understanding Your Variables***
"""

# Dataset Columns
data.columns

# Dataset Describe
data.describe()

"""### Variables Description

1.   **id:** *Unique identifier for each Airbnb listing.*
2.   **name:** *Title or name of the listing (e.g., "Cozy Room near Central Park").*
3.   **host_id:** *Unique identifier for the host (owner of the listing).*
4.   **host_name:** *Name of the host.*
5.   **neighbourhood_group**: *The main borough where the listing is located (e.g., Manhattan, Brooklyn).*
6.   **neighbourhood**: Specific neighborhood within the borough (e.g., Harlem, Chelsea).
7.   **latitude**: Latitude coordinate of the listing (for map location).
8.   **longitude**: Longitude coordinate of the listing (for map location).
9.   **room_type**:Type of space offered:
    *   Entire home/apt
    *   Private room
    *   Shared room

10.   **price**: Price per night (in US dollars) to book the listing.
11.   **minimum_nights**: Minimum number of nights a guest must book.
12.   **number_of_reviews:** Total number of reviews the listing has received.
13.   **last_review**: Date of the most recent review (if any).
14.   **reviews_per_month**: Average number of reviews per month (based on activity).
15.   **calculated_host_listings_count**: Number of listings the host owns on Airbnb.
16.   **availability_365**: Number of days the listing is available in a year (max: 365).

### Check Unique Values for each variable.
"""

# Check Unique Values for each variable.

unique_name = data['name'].unique()
print("Unique Names:", unique_name)

unique_host_name = data['host_name'].unique()
print("Unique Host Names:", unique_host_name)

unique_neighbourhood_group = data['neighbourhood_group'].unique()
print("Unique Neighbourhood Group:", unique_neighbourhood_group)

unique_room_type = data['room_type'].unique()
print("Unique Room Type:", unique_room_type)

"""## ***3. Data Vizualization, Storytelling & Experimenting with charts : Understand the relationships between variables***

#### Chart - 1: Room Type Distribution by Neighbourhood Group
"""

# Understand which types of rooms are more common in each borough (neighbourhood group). This helps platforms or hosts tailor their offerings better.

plt.figure(figsize=(10,6))
sns.countplot(data=data, x='neighbourhood_group', hue='room_type', palette='Set2')
plt.title('Room Type Distribution by Neighbourhood Group')
plt.xlabel('Neighbourhood Group')
plt.ylabel('Number of Listings')
plt.legend(title='Room Type')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*A countplot is ideal for showing the frequency of categories.*

*Grouping by both neighbourhood_group and room_type shows distribution clearly and compares how different room types vary across boroughs.*

##### 2. What is/are the insight(s) found from the chart?

*Manhattan has the highest number of Entire home/apt listings — indicating it's a prime tourist location.*

*Brooklyn has a balanced mix, with many Private rooms, suggesting affordability.*

*Queens and Bronx have fewer listings overall, and Shared rooms are least common across all areas.*

*Staten Island has the lowest listing count.*

#### Chart - 2: Price Distribution by Room Type
"""

# Understand how prices vary between different room types, and whether some room types tend to be more expensive.

# Limit extreme outliers for better visual clarity (e.g., max price = $500)
filtered_df = data[data['price'] <= 500]

plt.figure(figsize=(10,6))
sns.boxplot(data=filtered_df, x='room_type', y='price', palette='Pastel1')
plt.title('Price Distribution by Room Type (Max Price = $500)')
plt.xlabel('Room Type')
plt.ylabel('Price (USD)')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Boxplots are ideal for visualizing price spread, median, and outliers.*

*They help compare distributions, not just averages — very useful when pricing has a wide range and skew.*

##### 2. What is/are the insight(s) found from the chart?

*Entire home/apt listings have the highest median price, with many listings above $200.*

*Private rooms are much more affordable, with a tighter distribution around $50–$100.*

*Shared rooms are the cheapest, with prices typically under $50.*

*There are many outliers, especially in the Entire home category — indicating luxury/high-end listings.*

#### Chart - 3: Price Distribution by Neighbourhood Group
"""

# Compare how expensive or affordable each borough is for Airbnb listings.

# Filter to remove extreme outliers for clarity (e.g., price > $500)
filtered_df = data[data['price'] <= 500]

plt.figure(figsize=(10,6))
sns.boxplot(data=filtered_df, x='neighbourhood_group', y='price', palette='Set3')
plt.title('Price Distribution by Neighbourhood Group (Max Price = $500)')
plt.xlabel('Neighbourhood Group')
plt.ylabel('Price (USD)')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*To visually compare boroughs and see which areas are costlier.*

*A boxplot helps understand not just averages but also spread and pricing behavior (e.g., outliers in Manhattan).*

##### 2. What is/are the insight(s) found from the chart?

*Manhattan has the highest prices, with a wide range and many high-end listings.*

*Brooklyn follows with a decent mix of affordable and mid-range prices.*

*Queens, Bronx, and Staten Island are generally more affordable.*

*There’s less price variation in Staten Island — likely due to fewer listings.*

#### Chart - 4: Top 10 Most Popular Neighbourhoods (by Number of Listings)
"""

# Identify which neighbourhoods in NYC have the most Airbnb activity. This reflects demand, host saturation, or location appeal.

# Count listings by neighbourhood and get top 10
top_neighbourhoods = data['neighbourhood'].value_counts().nlargest(10)

plt.figure(figsize=(10,6))
sns.barplot(x=top_neighbourhoods.values, y=top_neighbourhoods.index, palette='viridis')
plt.title('Top 10 Most Popular Neighbourhoods by Number of Listings')
plt.xlabel('Number of Listings')
plt.ylabel('Neighbourhood')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*A horizontal bar plot helps clearly show rankings of neighbourhoods based on listing count.*

*It's great for showcasing frequency comparisons.*

##### 2. What is/are the insight(s) found from the chart?

*Williamsburg in Brooklyn is the most popular neighbourhood for Airbnb listings.*

*Harlem and Bedford-Stuyvesant also rank high — likely due to location, tourism, and housing options.*

*Popular neighbourhoods are mostly in Brooklyn and Manhattan, indicating a centralized demand.*

#### Chart - 5: Availability of Listings by Room Type
"""

# Understand how many days per year different room types are available. This helps identify which room types are most open for bookings.

plt.figure(figsize=(10,6))
room_types = data['room_type'].unique()

# Plot histogram for each room type
for room in room_types:
    subset = data[data['room_type'] == room]
    sns.histplot(subset['availability_365'], label=room, kde=False, bins=40, alpha=0.6)

plt.title('Availability Distribution Across Room Types')
plt.xlabel('Availability (Days per Year)')
plt.ylabel('Number of Listings')
plt.legend(title='Room Type')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Violin plot shows the distribution shape — where values are dense or sparse — in a clean way over 0–365 days.*

*Histogram reveals frequency of availability days across all listings, so you can see spikes like listings available all year.*

##### 2. What is/are the insight(s) found from the chart?

*Large spikes at 365 days: Many listings are available the entire year, especially Entire home/apt listings.*

*Private rooms have a more spread-out availability — possibly because owners also live there.*

*Shared rooms are more likely to have low availability (many under 100 days).*

*There’s a concentration at 0, which might indicate temporarily inactive or blocked listings.*

#### Chart - 6: Availability vs Number of Reviews
"""

# To find whether listings that are available for more days tend to get more reviews, indicating higher occupancy or guest interaction.

# Limit to reasonable values for readability
filtered_df = data[(data['availability_365'] > 0) & (data['number_of_reviews'] < 500)]

plt.figure(figsize=(10,6))
sns.scatterplot(data=filtered_df, x='availability_365', y='number_of_reviews', hue='room_type', alpha=0.5, palette='Set2')
plt.title('Availability vs Number of Reviews')
plt.xlabel('Availability (Days per Year)')
plt.ylabel('Number of Reviews')
plt.legend(title='Room Type')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*A scatter plot is ideal to show correlation or patterns between two numeric variables.*

*We can use color encoding to understand how different room types behave in the same plot.*

##### 2. What is/are the insight(s) found from the chart?

*A positive trend is visible: listings with higher availability tend to have more reviews, especially in private rooms and entire homes.*

*Some listings have high reviews even with moderate availability — possibly very popular or well-located.*

*Shared rooms are fewer and tend to have low availability and fewer reviews.*

#### Chart - 7: Average Price by Neighbourhood Group
"""

# Chart Type: Bar Plot
# We’ll visualize the average listing price across each neighbourhood_group (i.e., borough like Manhattan, Brooklyn, etc.).


# Group and calculate average price per borough
avg_price = data.groupby('neighbourhood_group')['price'].mean().sort_values(ascending=False)

plt.figure(figsize=(8,5))
sns.barplot(x=avg_price.index, y=avg_price.values, palette='magma')
plt.title('Average Listing Price by Neighbourhood Group')
plt.ylabel('Average Price (USD)')
plt.xlabel('Neighbourhood Group')
plt.ylim(0, avg_price.max() + 50)
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Simple bar chart is best for comparing grouped average values like price.*

*Shows which areas are more premium (Manhattan) and which are more budget-friendly (Bronx, Staten Island).*

##### 2. What is/are the insight(s) found from the chart?

*Manhattan has the highest average price, confirming it as a premium location for Airbnb stays.*

*Brooklyn is next — still popular and relatively expensive.*

*Queens, Bronx, and Staten Island are more affordable.*

#### Chart - 8: Map of Airbnb Listings in NYC
"""

# Chart Type: Scatter Plot on Coordinates (Lat/Lon)
# We’ll plot all listings by their latitude and longitude and color them by neighbourhood_group.

plt.figure(figsize=(10,8))
sns.scatterplot(
    data=data,
    x='longitude',
    y='latitude',
    hue='neighbourhood_group',
    palette='Set1',
    alpha=0.4,
    s=10
)

plt.title('NYC Airbnb Listings Map by Neighbourhood Group')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.legend(title='Neighbourhood Group')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Mapping lat/lon lets us visualize real-world locations of listings.*

*Using color by borough reveals clustered activity, like heavy concentration in Manhattan and Brooklyn.*

##### 2. What is/are the insight(s) found from the chart?

*High density in Manhattan and Brooklyn — strong market presence.*

*Some sparse distribution in Staten Island and Bronx.*

*Hotspots like Lower Manhattan, Williamsburg, and parts of Queens are visible.*

*Helps identify under-served or over-saturated areas.*

#### Chart - 9: Correlation Heatmap
"""

# Chart Type: Heatmap of Correlation Coefficients
# We’ll calculate the Pearson correlation between all numerical variables to find linear relationships.

# Selecting only numerical columns
numeric_cols = data.select_dtypes(include=['int64', 'float64'])

# Compute correlation matrix
corr_matrix = numeric_cols.corr()

# Plot heatmap
plt.figure(figsize=(10,7))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap of Numerical Features')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Correlation heatmaps are essential for EDA — they reveal dependencies or redundancies in numeric features.*

*Helps detect multicollinearity or strong associations that can guide modeling or feature engineering.*

##### 2. What is/are the insight(s) found from the chart?

*The **reviews_per_month** is positively correlated with **number_of_reviews**, as expected.*

*The **minimum_nights**, **price**, and **availability_365** are very weakly correlated with most others — suggesting they’re independent features.*

*The **calculated_host_listings_count** shows a slight correlation with **availability_365** — possibly hosts with many listings keep them open year-round.*

#### Chart -10: Distribution of Prices by Room Type
"""

# Chart Type: Histogram with KDE (Kernel Density Estimation)
# To keep the distribution clean and insightful, we'll remove extreme price outliers (e.g., listings priced above $500).

# Filter out extreme prices for clarity
filtered_df = data[data['price'] <= 500]

plt.figure(figsize=(10,6))
sns.histplot(data=filtered_df, x='price', hue='room_type', kde=True, palette='viridis', bins=50, element='step', stat='density')
plt.title('Price Distribution by Room Type (<= $500)')
plt.xlabel('Price (USD)')
plt.ylabel('Density')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Histograms with KDE give a smooth, clear picture of distribution and concentration.*

*Removing extreme outliers keeps the plot readable and focuses on realistic guest choices.*

##### 2. What is/are the insight(s) found from the chart?

*Private rooms are most often priced below $100 — budget-friendly.*

*Entire homes/apts show a wider spread — from ~$50 up to $500.*

*Shared rooms have the lowest and narrowest price range.*

*You can see the market segmentation clearly:*

    *   Budget-conscious travelers → shared/private rooms
    *   Premium/luxury travelers → entire home/apartment

#### Chart - 11: Top 10 Hosts with Most Listings
"""

# Chart Type: Horizontal Bar Chart
# This chart shows the top 10 host names with the highest number of listings.

# Top 10 hosts by number of listings
top_hosts = data['host_name'].value_counts().head(10)

plt.figure(figsize=(10,6))
sns.barplot(x=top_hosts.values, y=top_hosts.index, palette='crest')
plt.title('Top 10 Hosts with Most Listings')
plt.xlabel('Number of Listings')
plt.ylabel('Host Name')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*A horizontal bar chart is perfect for ranking categorical variables like names.*

*This helps identify large-scale hosts who may be operating like commercial businesses.*

##### 2. What is/are the insight(s) found from the chart?

*A few hosts (e.g., Michael, David, Sonder) own dozens to hundreds of listings — indicating professional-scale operations.*

*Most other hosts have just 1 or 2 listings.*

*These top hosts may influence local pricing, availability, and guest experience.*

#### Chart - 12: Number of Listings by Price Range (Binned)
"""

#Chart Type: Histogram (with defined bins)
#We'll define price ranges like:
#0–50,51–100,101–150,151–200,201–300301–500500+

# Define custom price bins
price_bins = [0, 50, 100, 150, 200, 300, 500, data['price'].max()]
bin_labels = ['0-50', '51-100', '101-150', '151-200', '201-300', '301-500', '500+']
data['price_range'] = pd.cut(data['price'], bins=price_bins, labels=bin_labels, include_lowest=True)

# Count listings in each price range
price_range_counts = data['price_range'].value_counts().sort_index()

# Plot
plt.figure(figsize=(10,6))
sns.barplot(x=price_range_counts.index, y=price_range_counts.values, palette='plasma')
plt.title('Listings by Price Range')
plt.xlabel('Price Range (USD)')
plt.ylabel('Number of Listings')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Binned histogram clearly shows how many listings fall in different price brackets.*

*Easier to read than raw price histograms — especially with wide value ranges and outliers.*

##### 2. What is/are the insight(s) found from the chart?

*Most listings are between $51–100, showing Airbnb is widely used for budget-to-midrange stays.*

*Fewer listings in premium ranges ($301+), which may reflect niche luxury segments.*

*Helps spot pricing gaps — e.g., low density in certain ranges could be an opportunity.*

#### Chart - 13: Number of Reviews Over Time (Monthly Trend)
"""

# Chart Type: Time Series Line Plot
# We'll extract the month and year from last_review and count how many listings had reviews per month. This serves as a proxy for booking activity.

# Replace non-date strings with NaT (Not a Time)
data['last_review'] = pd.to_datetime(data['last_review'], errors='coerce')

# Drop rows with missing last_review values
review_dates = data.dropna(subset=['last_review'])

# Group by review month
monthly_reviews = review_dates['last_review'].dt.to_period('M').value_counts().sort_index()

# Convert PeriodIndex to datetime
monthly_reviews.index = monthly_reviews.index.to_timestamp()

# Plot
plt.figure(figsize=(12,6))
sns.lineplot(x=monthly_reviews.index, y=monthly_reviews.values, marker='o', color='teal')
plt.title('Monthly Review Count (Booking Trend Over Time)')
plt.xlabel('Month')
plt.ylabel('Number of Listings with Reviews')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*Time series line plots are ideal for showing trends and seasonality over time.*

*Guest reviews typically follow actual stays, so this shows historical guest activity levels.*

##### 2. What is/are the insight(s) found from the chart?

*You’ll likely see peaks in mid-year months (spring/summer) — NYC's tourism season.*

*Drops in late winter months like January/February are common.*

*A sharp decline or stop in data may reflect dataset end (2019) or seasonal quiet periods.*

#### Chart - 14: Average Price by Room Type Across Neighbourhood Groups
"""

# Chart Type: Grouped Bar Chart
# We’ll plot the average price for each combination of room_type and neighbourhood_group. This helps compare how pricing varies across different zones and room types.

# Filter out extremely high prices (outliers) for better visualization
filtered_df = data[data['price'] < 500]

# Group by room type and neighbourhood group, then calculate mean price
grouped_prices = filtered_df.groupby(['neighbourhood_group', 'room_type'])['price'].mean().reset_index()

# Plot
plt.figure(figsize=(12,6))
sns.barplot(data=grouped_prices, x='neighbourhood_group', y='price', hue='room_type', palette='Set2')
plt.title('Average Price by Room Type Across Neighbourhood Groups')
plt.xlabel('Neighbourhood Group')
plt.ylabel('Average Price (USD)')
plt.legend(title='Room Type')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*This grouped bar chart compares multiple categorical dimensions — it's perfect for understanding how pricing behaves when both location and room type vary.*

*Helps visualize combined effects rather than isolated variables.*

##### 2. What is/are the insight(s) found from the chart?

*Manhattan has the highest average prices across all room types.*

*Entire homes/apartments are priced much higher than private or shared rooms, regardless of location.*

*Bronx and Staten Island offer the lowest average prices — good for budget travelers.*

#### Chart - 15: Correlation Heatmap (Numerical Variables)
"""

# Chart Type: Heatmap (Correlation Matrix)
# This chart helps identify:
# Strong positive or negative relationships between numeric variables,
# Features that might influence price, reviews, availability, etc.

# Select only numeric columns
numeric_df = data[['price', 'minimum_nights', 'number_of_reviews',
                 'reviews_per_month', 'calculated_host_listings_count', 'availability_365']]

# Compute correlation matrix
correlation_matrix = numeric_df.corr()

# Plot
plt.figure(figsize=(10,6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt=".2f")
plt.title('Correlation Heatmap of Numeric Features')
plt.tight_layout()
plt.show()

"""##### 1. Why did you pick the specific chart?

*A heatmap gives a compact view of how numerical columns interact.*

*It’s ideal for spotting multicollinearity, dependencies, or irrelevant fields for modeling or optimization.*

##### 2. What is/are the insight(s) found from the chart?

*number_of_reviews is positively correlated with reviews_per_month (expected).*

*price has weak or no strong correlation with most features — suggesting it's influenced by categorical/contextual data like location or room type.*

*minimum_nights and availability_365 show little correlation with reviews or price — might indicate separate usage patterns.*

## **4. Solution to Business Objective**

#### What do you suggest the client to achieve Business Objective ?
Explain Briefly.

1. Optimize Pricing Strategy
    *   Listings in Manhattan and Entire home/apt types have significantly higher average prices.
    *   Encourage hosts in undervalued areas (Bronx, Staten Island) to offer competitive pricing and better amenities.
    *   Use dynamic pricing models based on seasonality and demand trends.


2. Improve Review Collection
    * A large number of listings have 0 reviews, which may reduce guest trust.
    * Prompt users post-stay and offer incentives to encourage more reviews.
    * Promote highly-reviewed listings to build credibility and drive bookings.

3. Enhance New Host Support
    * Many listings with few or no bookings may be from new/inactive hosts.
    * Provide onboarding guidance, optimal pricing suggestions, and visibility support to these hosts.

4. Focus on High-Demand Neighborhoods
    * Brooklyn and Manhattan dominate in both quantity and popularity.
    * Identify high-demand pockets and offer localized marketing and experience bundles to attract tourists.

5. Leverage Availability Insights
    * Some listings have 365-day availability but low reviews — suggest host calendar optimization or pricing tweaks.
    * Prioritize and promote listings with consistent availability and high reviews.

6. Seasonal Promotion Planning
    * Review data peaks in spring/summer — ideal for seasonal ad campaigns.
    * Offer seasonal discounts or long-stay options during low seasons to maintain booking flow.

7. Filter Outliers and Fraudulent Listings
    * Listings with very high prices or unrealistic minimum nights skew data and user trust.
    * Use automated checks to flag or de-prioritize such entries in search results.

# **Conclusion**

This Exploratory Data Analysis (EDA) of Airbnb listings in New York City (2019) provided valuable insights into how location, room type, pricing, availability, and reviews influence the platform’s ecosystem.

Key findings include:

1.   Manhattan and Brooklyn dominate in both the number and price of listings, especially for entire homes/apartments.
2.   Private rooms are more affordable and widely available across all boroughs, catering to budget-conscious travelers.
3.   Most listings have a minimum stay of 1 night, but a few extreme values skew the data, requiring filtering for meaningful insights.
4.   Review activity peaks seasonally, especially during the warmer months, and is closely tied to listing visibility and trust.
5.   Several listings are always available (365 days) but have little to no reviews — suggesting potential issues with visibility, pricing, or user experience.
6.   Pricing shows weak correlation with numerical features, indicating a greater impact from location and categorical attributes like room type and host behavior.



These insights can be used to:

    * Guide pricing strategies,

    * Improve host onboarding and support,

    * Enhance guest targeting and satisfaction, and

    * Support data-driven decision making to increase bookings and revenue.

**Overall, this analysis serves as a foundation for deeper modeling (like forecasting or recommendation systems) and strategic improvements on the Airbnb platform.**

### ***Thank You !!!***
"""